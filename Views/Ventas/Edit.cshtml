@model Inmobiliaria_troncoso_leandro.Models.Pago
@{
    ViewData["Title"] = "Editar Pago de Venta";
}

<nav aria-label="breadcrumb" class="mb-4">
    <ol class="breadcrumb">
        <li class="breadcrumb-item"><a href="@Url.Action("Index", "Home")">Inicio</a></li>
        <li class="breadcrumb-item"><a href="@Url.Action("Index", "Pagos")">Pagos</a></li>
        <li class="breadcrumb-item"><a href="@Url.Action("Index", "Ventas")">Ventas</a></li>
        <li class="breadcrumb-item active">Editar</li>
    </ol>
</nav>

<div class="d-flex justify-content-between align-items-center mb-4">
    <div>
        <h2><i class="bi bi-pencil me-2"></i>Editar Pago de Venta</h2>
        <p class="text-muted mb-0">ID #@Model.IdPago - @Model.Concepto</p>
    </div>
    <div>
        <a href="@Url.Action("Details", new { id = Model.IdPago })" class="btn btn-outline-info">
            <i class="bi bi-eye me-1"></i>Ver Detalles
        </a>
        <a href="@Url.Action("Index", "Ventas")" class="btn btn-secondary ms-2">
            <i class="bi bi-arrow-left me-1"></i>Volver
        </a>
    </div>
</div>

@if (TempData["ErrorMessage"] != null)
{
    <div class="alert alert-danger alert-dismissible fade show" role="alert">
        <i class="bi bi-exclamation-triangle me-2"></i>
        @TempData["ErrorMessage"]
        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
    </div>
}

<form asp-action="Edit" method="post" enctype="multipart/form-data" id="editVentaForm">
    @Html.AntiForgeryToken()
    <input asp-for="IdPago" type="hidden" />
    <input asp-for="IdInmueble" type="hidden" />
    <input asp-for="TipoPago" type="hidden" />
    <input asp-for="IdUsuarioCreador" type="hidden" />
    <input asp-for="FechaCreacion" type="hidden" />

    <div class="row">
        <!-- Información del inmueble (solo lectura) -->
        <div class="col-12">
            <div class="alert alert-success mb-4">
                <div class="row">
                    <div class="col-md-8">
                        <h6><i class="bi bi-building me-2"></i>Inmueble</h6>
                        <p class="mb-0">@Model.Inmueble?.Direccion</p>
                        <small class="text-muted">ID: @Model.IdInmueble</small>
                    </div>
                    <div class="col-md-4 text-end">
                        <a href="@Url.Action("PorInmueble", "Ventas", new { inmuebleId = Model.IdInmueble })" 
                           class="btn btn-sm btn-outline-success">
                            <i class="bi bi-building me-1"></i>Ver Todos los Pagos
                        </a>
                    </div>
                </div>
            </div>
        </div>

        <!-- Columna principal del formulario -->
        <div class="col-md-8">
            <div class="card">
                <div class="card-header">
                    <h5 class="card-title mb-0">
                        <i class="bi bi-form-check me-2"></i>Datos del Pago
                    </h5>
                </div>
                <div class="card-body">
                    <div class="row">
                        <!-- Fecha de Pago -->
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label asp-for="FechaPago" class="form-label">
                                    <i class="bi bi-calendar me-1"></i>Fecha de Pago <span class="text-danger">*</span>
                                </label>
                                <input asp-for="FechaPago" type="date" class="form-control" />
                                <span asp-validation-for="FechaPago" class="text-danger"></span>
                            </div>
                        </div>

                        <!-- Estado -->
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label asp-for="Estado" class="form-label">
                                    <i class="bi bi-check-circle me-1"></i>Estado <span class="text-danger">*</span>
                                </label>
                                <select asp-for="Estado" class="form-select">
                                    <option value="pagado" @@(Model.Estado == "pagado" ? "selected" : "")>Pagado</option>
                                    <option value="pendiente" @@(Model.Estado == "pendiente" ? "selected" : "")>Pendiente</option>
                                    <option value="anulado" @@(Model.Estado == "anulado" ? "selected" : "")>Anulado</option>
                                </select>
                                <span asp-validation-for="Estado" class="text-danger"></span>
                            </div>
                        </div>
                    </div>

                    <!-- Concepto -->
                    <div class="mb-3">
                        <label asp-for="Concepto" class="form-label">
                            <i class="bi bi-chat-text me-1"></i>Concepto <span class="text-danger">*</span>
                        </label>
                        <input asp-for="Concepto" class="form-control" />
                        <span asp-validation-for="Concepto" class="text-danger"></span>
                    </div>

                    <!-- Monto Base -->
                    <div class="mb-3">
                        <label asp-for="MontoBase" class="form-label">
                            <i class="bi bi-currency-dollar me-1"></i>Monto <span class="text-danger">*</span>
                        </label>
                        <div class="input-group">
                            <span class="input-group-text">$</span>
                            <input asp-for="MontoBase" type="number" step="0.01" class="form-control" id="MontoBase" />
                        </div>
                        <span asp-validation-for="MontoBase" class="text-danger"></span>
                    </div>

                    <!-- Observaciones -->
                    <div class="mb-3">
                        <label asp-for="Observaciones" class="form-label">
                            <i class="bi bi-chat-dots me-1"></i>Observaciones
                        </label>
                        <textarea asp-for="Observaciones" class="form-control" rows="3"></textarea>
                        <span asp-validation-for="Observaciones" class="text-danger"></span>
                    </div>

                    <!-- Comprobante actual y nuevo -->
                    <div class="row">
                        @if (!string.IsNullOrEmpty(Model.ComprobanteRuta))
                        {
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label class="form-label">
                                        <i class="bi bi-file-check me-1"></i>Comprobante Actual
                                    </label>
                                    <div class="card border-success">
                                        <div class="card-body py-2">
                                            <div class="d-flex justify-content-between align-items-center">
                                                <div>
                                                    <i class="bi bi-file-earmark-pdf text-danger me-2"></i>
                                                    <small>@Model.ComprobanteNombre</small>
                                                </div>
                                                <div>
                                                    <a href="@Model.ComprobanteRuta" target="_blank" class="btn btn-sm btn-outline-primary">
                                                        <i class="bi bi-eye"></i>
                                                    </a>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        }

                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="comprobante" class="form-label">
                                    <i class="bi bi-file-earmark me-1"></i>
                                    @if (!string.IsNullOrEmpty(Model.ComprobanteRuta))
                                    {
                                        <text>Reemplazar Comprobante</text>
                                    }
                                    else
                                    {
                                        <text>Adjuntar Comprobante</text>
                                    }
                                </label>
                                <input type="file" class="form-control" id="comprobante" name="comprobante" 
                                       accept=".pdf,.jpg,.jpeg,.png" />
                                <div class="form-text">PDF, JPG, PNG. Máximo 5MB.</div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Sidebar con información adicional -->
        <div class="col-md-4">
            <!-- Información del pago -->
            <div class="card mb-3">
                <div class="card-header bg-success text-white">
                    <h6 class="card-title mb-0">
                        <i class="bi bi-info-circle me-2"></i>Información del Pago
                    </h6>
                </div>
                <div class="card-body">
                    <table class="table table-borderless table-sm">
                        <tr>
                            <td><strong>ID:</strong></td>
                            <td>#@Model.IdPago</td>
                        </tr>
                        <tr>
                            <td><strong>Tipo:</strong></td>
                            <td><span class="badge bg-@(GetTipoPagoBadgeClass(Model.Concepto))">@GetTipoPagoFromConcepto(Model.Concepto)</span></td>
                        </tr>
                        <tr>
                            <td><strong>Monto Actual:</strong></td>
                            <td class="fw-bold text-success">@Model.MontoTotal.ToString("C")</td>
                        </tr>
                        <tr>
                            <td><strong>Creado:</strong></td>
                            <td>@Model.FechaCreacion.ToString("dd/MM/yyyy")</td>
                        </tr>
                        <tr>
                            <td><strong>Estado:</strong></td>
                            <td><span class="badge bg-@(GetEstadoBadgeClass(Model.Estado))">@Model.Estado.ToUpper()</span></td>
                        </tr>
                    </table>
                </div>
            </div>

            <!-- Calculadora de porcentajes -->
            <div class="card mb-3 border-info">
                <div class="card-header bg-info text-white">
                    <h6 class="card-title mb-0">
                        <i class="bi bi-calculator me-2"></i>Calculadora de Referencia
                    </h6>
                </div>
                <div class="card-body">
                    <div class="mb-3">
                        <label for="precioReferencia" class="form-label small">Precio de referencia:</label>
                        <div class="input-group input-group-sm">
                            <span class="input-group-text">$</span>
                            <input type="number" id="precioReferencia" class="form-control" placeholder="0" />
                        </div>
                    </div>
                    
                    <div class="row">
                        <div class="col-6">
                            <button type="button" class="btn btn-outline-warning btn-sm w-100 mb-2" onclick="calcularPorcentaje(10)">
                                10%
                            </button>
                            <button type="button" class="btn btn-outline-info btn-sm w-100 mb-2" onclick="calcularPorcentaje(30)">
                                30%
                            </button>
                        </div>
                        <div class="col-6">
                            <button type="button" class="btn btn-outline-warning btn-sm w-100 mb-2" onclick="calcularPorcentaje(20)">
                                20%
                            </button>
                            <button type="button" class="btn btn-outline-success btn-sm w-100 mb-2" onclick="calcularPorcentaje(50)">
                                50%
                            </button>
                        </div>
                    </div>
                    
                    <div class="text-center mt-2">
                        <div class="bg-light rounded p-2">
                            <small><strong>Resultado:</strong></small><br>
                            <span id="montoCalculado" class="text-success">$0</span>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Historial de cambios -->
            <div class="card mb-3">
                <div class="card-header bg-light">
                    <h6 class="card-title mb-0">
                        <i class="bi bi-clock-history me-2"></i>Historial
                    </h6>
                </div>
                <div class="card-body">
                    <div class="small">
                        <div class="mb-2">
                            <strong>Creado:</strong><br>
                            @Model.FechaCreacion.ToString("dd/MM/yyyy HH:mm")<br>
                            <span class="text-muted">por @Model.UsuarioCreador?.Nombre @Model.UsuarioCreador?.Apellido</span>
                        </div>
                        
                        @if (Model.FechaAnulacion.HasValue)
                        {
                            <div class="mb-2">
                                <strong>Anulado:</strong><br>
                                @Model.FechaAnulacion.Value.ToString("dd/MM/yyyy HH:mm")<br>
                                <span class="text-muted">por @Model.UsuarioAnulador?.Nombre @Model.UsuarioAnulador?.Apellido</span>
                            </div>
                        }
                        
                        <div class="mt-3 p-2 bg-light rounded">
                            <small class="text-muted">
                                <i class="bi bi-shield-check me-1"></i>
                                Todos los cambios quedan registrados para auditoría.
                            </small>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Acciones adicionales -->
            <div class="card">
                <div class="card-header bg-warning text-dark">
                    <h6 class="card-title mb-0">
                        <i class="bi bi-tools me-2"></i>Acciones Rápidas
                    </h6>
                </div>
                <div class="card-body">
                    <div class="d-grid gap-2">
                        <a href="@Url.Action("Index", "Inmuebles", new { inmuebleId = Model.IdInmueble })" 
                           class="btn btn-outline-success btn-sm">
                            <i class="bi bi-building me-2"></i>Ver Inmuebles
                        </a>
                        
                        @if (!string.IsNullOrEmpty(Model.ComprobanteRuta))
                        {
                            <a href="@Model.ComprobanteRuta" target="_blank" class="btn btn-outline-primary btn-sm">
                                <i class="bi bi-download me-2"></i>Descargar Comprobante
                            </a>
                        }
                        
                        @if (Model.Estado == "pendiente")
                        {
                            <button onclick="marcarComoPagado(@Model.IdPago)" class="btn btn-outline-success btn-sm">
                                <i class="bi bi-check-circle me-2"></i>Marcar como Pagado
                            </button>
                        }
                        
                        <a href="@Url.Action("Create", "Ventas", new { inmuebleId = Model.IdInmueble })" 
                           class="btn btn-outline-info btn-sm">
                            <i class="bi bi-plus-circle me-2"></i>Nuevo Pago del Inmueble
                        </a>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Botones de acción -->
    <div class="row mt-4">
        <div class="col-12">
            <div class="card">
                <div class="card-body text-center">
                    <button type="submit" class="btn btn-success btn-lg me-3">
                        <i class="bi bi-floppy me-2"></i>Guardar Cambios
                    </button>
                    <a href="@Url.Action("Details", new { id = Model.IdPago })" class="btn btn-outline-info btn-lg me-3">
                        <i class="bi bi-eye me-2"></i>Ver Detalles
                    </a>
                    <a href="@Url.Action("Index", "Ventas")" class="btn btn-outline-secondary btn-lg">
                        <i class="bi bi-x-circle me-2"></i>Cancelar
                    </a>
                </div>
            </div>
        </div>
    </div>

    <!-- Inputs hidden -->
    <input asp-for="MontoTotal" type="hidden" id="MontoTotalHidden" />
    <input asp-for="RecargoMora" type="hidden" value="0" />
    <input asp-for="DiasMora" type="hidden" value="0" />
</form>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            configurarCalculadoras();
            configurarValidaciones();
            sincronizarMontos();
        });

        function configurarCalculadoras() {
            // Sincronizar MontoBase con MontoTotal
            document.getElementById('MontoBase').addEventListener('input', sincronizarMontos);
        }

        function sincronizarMontos() {
            const montoBase = parseFloat(document.getElementById('MontoBase').value) || 0;
            document.getElementById('MontoTotalHidden').value = montoBase;
        }

        function calcularPorcentaje(porcentaje) {
            const precio = parseFloat(document.getElementById('precioReferencia').value) || 0;
            if (precio === 0) {
                alert('Primero ingrese un precio de referencia');
                document.getElementById('precioReferencia').focus();
                return;
            }
            
            const monto = precio * (porcentaje / 100);
            document.getElementById('MontoBase').value = monto.toFixed(2);
            sincronizarMontos();
            document.getElementById('montoCalculado').textContent = monto.toLocaleString('es-AR', {
                style: 'currency',
                currency: 'ARS'
            });
        }

        function configurarValidaciones() {
            const form = document.getElementById('editVentaForm');
            
            form.addEventListener('submit', function(e) {
                const montoBase = parseFloat(document.getElementById('MontoBase').value);
                
                if (!montoBase || montoBase <= 0) {
                    e.preventDefault();
                    alert('Debe ingresar un monto válido mayor a cero');
                    document.getElementById('MontoBase').focus();
                    return;
                }

                // Mostrar indicador de carga
                const submitBtn = this.querySelector('button[type="submit"]');
                const originalText = submitBtn.innerHTML;
                submitBtn.innerHTML = '<span class="spinner-border spinner-border-sm me-2"></span>Guardando cambios...';
                submitBtn.disabled = true;

                // En caso de error, restaurar el botón
                setTimeout(() => {
                    if (submitBtn.disabled) {
                        submitBtn.innerHTML = originalText;
                        submitBtn.disabled = false;
                    }
                }, 10000);
            });

            // Validación en tiempo real del monto
            document.getElementById('MontoBase').addEventListener('input', function() {
                const valor = parseFloat(this.value);
                if (valor < 0) {
                    this.value = 0;
                }
            });
        }

        function marcarComoPagado(idPago) {
            if (confirm('¿Confirma que desea marcar este pago como pagado?')) {
                fetch(`@Url.Action("MarcarComoPagado", "Ventas")?idPago=${idPago}`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value
                    }
                })
                .then(response => {
                    if (response.ok) {
                        window.location.href = '@Url.Action("Details", new { id = Model.IdPago })';
                    } else {
                        alert('Error al marcar el pago como pagado');
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    alert('Error de conexión');
                });
            }
        }

        // Función para previsualizar archivo antes de subir
        document.getElementById('comprobante').addEventListener('change', function(e) {
            const file = e.target.files[0];
            if (file) {
                // Validar tamaño
                if (file.size > 5 * 1024 * 1024) {
                    alert('El archivo es demasiado grande. El tamaño máximo es 5MB.');
                    this.value = '';
                    return;
                }

                // Validar tipo
                const allowedTypes = ['application/pdf', 'image/jpeg', 'image/jpg', 'image/png'];
                if (!allowedTypes.includes(file.type)) {
                    alert('Tipo de archivo no permitido. Use PDF, JPG o PNG.');
                    this.value = '';
                    return;
                }

                // Mostrar información del archivo seleccionado
                const info = document.createElement('div');
                info.className = 'alert alert-success mt-2';
                info.innerHTML = `
                    <i class="bi bi-check-circle me-2"></i>
                    <strong>Archivo seleccionado:</strong> ${file.name} (${(file.size / 1024 / 1024).toFixed(2)} MB)
                `;
                
                // Remover info anterior si existe
                const existingInfo = this.parentNode.querySelector('.alert');
                if (existingInfo && existingInfo !== info) {
                    existingInfo.remove();
                }
                
                if (!existingInfo) {
                    this.parentNode.appendChild(info);
                }
            }
        });
    </script>
}

<style>
    .card-header.bg-success {
        border-bottom: 1px solid rgba(255,255,255,.2);
    }

    .card-header.bg-info {
        border-bottom: 1px solid rgba(255,255,255,.2);
    }

    .btn:disabled {
        opacity: 0.6;
        cursor: not-allowed;
    }
</style>

@functions {
    public string GetEstadoBadgeClass(string estado)
    {
        return estado?.ToLower() switch
        {
            "pagado" => "success",
            "pendiente" => "warning",
            "anulado" => "secondary",
            _ => "primary"
        };
    }
    
    public string GetTipoPagoBadgeClass(string concepto)
    {
        var conceptoLower = concepto?.ToLower() ?? "";
        
        if (conceptoLower.Contains("seña")) return "warning";
        if (conceptoLower.Contains("anticipo")) return "info";
        if (conceptoLower.Contains("total") || conceptoLower.Contains("completo")) return "success";
        if (conceptoLower.Contains("reserva")) return "secondary";
        
        return "primary";
    }
    
    public string GetTipoPagoFromConcepto(string concepto)
    {
        var conceptoLower = concepto?.ToLower() ?? "";
        
        if (conceptoLower.Contains("seña")) return "SEÑA";
        if (conceptoLower.Contains("anticipo")) return "ANTICIPO";  
        if (conceptoLower.Contains("total") || conceptoLower.Contains("completo")) return "TOTAL";
        if (conceptoLower.Contains("reserva")) return "RESERVA";
        
        return "VENTA";
    }
}