@model Inmobiliaria_troncoso_leandro.Models.Pago
@{
    ViewData["Title"] = "Anular Pago de Venta";
}

<!-- Breadcrumb Navigation -->
<nav aria-label="breadcrumb" class="mb-4">
    <ol class="breadcrumb">
        <li class="breadcrumb-item"><a href="@Url.Action("Index", "Home")">Inicio</a></li>
        <li class="breadcrumb-item"><a href="@Url.Action("Index", "Pagos")">Pagos</a></li>
        <li class="breadcrumb-item"><a href="@Url.Action("Index", "Ventas")">Ventas</a></li>
        <li class="breadcrumb-item active">Anular</li>
    </ol>
</nav>

<!-- Page Header -->
<div class="d-flex justify-content-between align-items-center mb-4">
    <div>
        <h2><i class="bi bi-exclamation-triangle text-danger me-2"></i>Anular Pago de Venta</h2>
        <p class="text-muted mb-0">Esta acción no se puede deshacer</p>
    </div>
    <div>
        <a href="@Url.Action("Details", new { id = Model.IdPago })" class="btn btn-outline-info"><i class="bi bi-eye me-1"></i>Ver Detalles</a>
        <a href="@Url.Action("Index", "Ventas")" class="btn btn-secondary ms-2"><i class="bi bi-arrow-left me-1"></i>Cancelar</a>
    </div>
</div>

<!-- Error Messages -->
@if (TempData["ErrorMessage"] != null)
{
    <div class="alert alert-danger alert-dismissible fade show" role="alert">
        <i class="bi bi-exclamation-triangle me-2"></i>@TempData["ErrorMessage"]
        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
    </div>
}

<!-- Already Cancelled Check -->
@if (Model.Estado.ToLower() == "anulado")
{
    <div class="alert alert-warning" role="alert">
        <i class="bi bi-info-circle me-2"></i><strong>Este pago ya está anulado.</strong> No se pueden realizar más acciones sobre él.
        <div class="mt-2">
            <a href="@Url.Action("Details", new { id = Model.IdPago })" class="btn btn-sm btn-outline-primary">Ver Detalles</a>
            <a href="@Url.Action("Index", "Ventas")" class="btn btn-sm btn-outline-secondary ms-2">Volver a Lista</a>
        </div>
    </div>
}
else
{
    <!-- Warning Alert -->
    <div class="alert alert-danger border-2" role="alert">
        <div class="d-flex">
            <div class="flex-shrink-0"><i class="bi bi-exclamation-triangle-fill fs-2"></i></div>
            <div class="flex-grow-1 ms-3">
                <h4 class="alert-heading">⚠️ Acción Irreversible</h4>
                <p class="mb-0">Está a punto de <strong>anular</strong> este pago de venta. Una vez anulado:</p>
                <ul class="mt-2 mb-0">
                    <li>No se podrá revertir esta acción</li>
                    <li>El pago quedará marcado como "anulado" permanentemente</li>
                    <li>Se registrará quién y cuándo realizó la anulación</li>
                    <li>El estado del inmueble puede verse afectado</li>
                    <li>Los totales del proceso de venta se recalcularán</li>
                </ul>
            </div>
        </div>
    </div>

    <div class="row">
        <!-- Left Column: Main Information -->
        <div class="col-md-8">
            <!-- Payment Information Card -->
            <div class="card border-danger">
                <div class="card-header bg-danger text-white">
                    <h5 class="card-title mb-0"><i class="bi bi-receipt me-2"></i>Pago a Anular</h5>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-6">
                            <table class="table table-borderless">
                                <tr><td class="fw-semibold">ID del Pago:</td><td><span class="badge bg-success fs-6">#@Model.IdPago</span></td></tr>
                                <tr><td class="fw-semibold">Concepto:</td><td>@Model.Concepto</td></tr>
                                <tr><td class="fw-semibold">Fecha de Pago:</td><td>@Model.FechaPago.ToString("dd/MM/yyyy")</td></tr>
                                <tr><td class="fw-semibold">Estado Actual:</td><td><span class="badge bg-@(GetEstadoBadgeClass(Model.Estado))">@Model.Estado.ToUpper()</span></td></tr>
                            </table>
                        </div>
                        <div class="col-md-6">
                            <table class="table table-borderless">
                                <tr><td class="fw-semibold">Monto:</td><td class="fw-bold fs-5 text-success">@Model.MontoTotal.ToString("C")</td></tr>
                                <tr><td class="fw-semibold">Tipo:</td><td><span class="badge bg-@(GetTipoPagoBadgeClass(Model.Concepto)) px-3">@GetTipoPagoFromConcepto(Model.Concepto)</span></td></tr>
                                <tr><td class="fw-semibold">Inmueble:</td><td>ID: @Model.IdInmueble</td></tr>
                                <tr><td class="fw-semibold">Creado por:</td><td>@Model.UsuarioCreador?.Nombre @Model.UsuarioCreador?.Apellido</td></tr>
                            </table>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Property Information Card -->
            <div class="card mt-4">
                <div class="card-header bg-light">
                    <h6 class="card-title mb-0"><i class="bi bi-building me-2"></i>Inmueble Relacionado</h6>
                </div>
                <div class="card-body">
                    <div class="d-flex align-items-center">
                        <div class="bg-success bg-opacity-10 rounded p-3 me-3"><i class="bi bi-building text-success fs-3"></i></div>
                        <div class="flex-grow-1">
                            <h6 class="mb-1">@Model.Inmueble?.Direccion</h6>
                            <p class="text-muted mb-0">ID: @Model.IdInmueble</p>
                            @if (ViewBag.EstadoInmueble != null)
                            {
                                <span class="badge bg-@(GetEstadoInmuebleBadgeClass(ViewBag.EstadoInmueble?.ToString())) mt-1">Estado: @(ViewBag.EstadoInmueble?.ToString() ?? "Disponible")</span>
                            }
                        </div>
                        <div><a href="@Url.Action("PorInmueble", "Ventas", new { inmuebleId = Model.IdInmueble })" class="btn btn-sm btn-outline-info"><i class="bi bi-building me-1"></i>Ver Historial</a></div>
                    </div>
                </div>
            </div>

            <!-- Cancellation Form -->
            <div class="card mt-4 border-warning">
                <div class="card-header bg-warning text-dark">
                    <h6 class="card-title mb-0"><i class="bi bi-chat-dots me-2"></i>Motivo de Anulación</h6>
                </div>
                <div class="card-body">
                    <form asp-action="Delete" method="post" id="deleteForm">
                        @Html.AntiForgeryToken()
                        <input asp-for="IdPago" type="hidden" />
                        <div class="mb-3">
                            <label for="motivoAnulacion" class="form-label"><i class="bi bi-textarea-resize me-1"></i>Motivo de la anulación <span class="text-danger">*</span></label>
                            <textarea id="motivoAnulacion" name="motivoAnulacion" class="form-control" rows="4" placeholder="Explique el motivo por el cual está anulando este pago de venta..." required></textarea>
                            <div class="form-text">Este motivo quedará registrado permanentemente en el historial</div>
                        </div>
                        <div class="mb-3">
                            <label for="impactoInmueble" class="form-label"><i class="bi bi-gear me-1"></i>Impacto en el inmueble</label>
                            <select id="impactoInmueble" name="impactoInmueble" class="form-select">
                                <option value="mantener">Mantener estado actual del inmueble</option>
                                <option value="disponible" selected>Cambiar inmueble a "Disponible"</option>
                                <option value="reservado">Cambiar inmueble a "Reservado"</option>
                            </select>
                            <div class="form-text">Seleccione cómo debe afectar la anulación al estado del inmueble</div>
                        </div>
                        <div class="form-check mb-3">
                            <input class="form-check-input" type="checkbox" id="confirmarAnulacion" required>
                            <label class="form-check-label fw-semibold" for="confirmarAnulacion">Confirmo que deseo anular este pago de venta y entiendo que esta acción es irreversible</label>
                        </div>
                        <div class="form-check mb-4">
                            <input class="form-check-input" type="checkbox" id="confirmarImpacto" required>
                            <label class="form-check-label" for="confirmarImpacto">Entiendo que esta anulación puede afectar el proceso de venta del inmueble</label>
                        </div>
                        <div class="d-grid gap-2 d-md-flex justify-content-md-center">
                            <button type="submit" class="btn btn-danger btn-lg me-md-3" id="btnAnular" disabled><i class="bi bi-x-circle me-2"></i>Anular Pago Definitivamente</button>
                            <a href="@Url.Action("Details", new { id = Model.IdPago })" class="btn btn-outline-secondary btn-lg"><i class="bi bi-arrow-left me-2"></i>Cancelar y Volver</a>
                        </div>
                    </form>
                </div>
            </div>
        </div>

        <!-- Right Column: Sidebar Information -->
        <div class="col-md-4">
            <!-- Impact Information Card -->
            <div class="card border-info">
                <div class="card-header bg-info text-white">
                    <h6 class="card-title mb-0"><i class="bi bi-info-circle me-2"></i>Impacto de la Anulación</h6>
                </div>
                <div class="card-body">
                    <div class="list-group list-group-flush">
                        <div class="list-group-item px-0 border-0">
                            <div class="d-flex align-items-center">
                                <i class="bi bi-check-circle text-success me-3"></i>
                                <div><strong>Registro preservado</strong><div class="small text-muted">El pago seguirá visible para auditoría</div></div>
                            </div>
                        </div>
                        <div class="list-group-item px-0 border-0">
                            <div class="d-flex align-items-center">
                                <i class="bi bi-building text-warning me-3"></i>
                                <div><strong>Estado del inmueble</strong><div class="small text-muted">Se puede ajustar según corresponda</div></div>
                            </div>
                        </div>
                        <div class="list-group-item px-0 border-0">
                            <div class="d-flex align-items-center">
                                <i class="bi bi-calculator text-info me-3"></i>
                                <div><strong>Recálculo automático</strong><div class="small text-muted">Totales del proceso de venta</div></div>
                            </div>
                        </div>
                        <div class="list-group-item px-0 border-0">
                            <div class="d-flex align-items-center">
                                <i class="bi bi-shield-check text-primary me-3"></i>
                                <div><strong>Auditoría completa</strong><div class="small text-muted">Registro de quién, cuándo y por qué</div></div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Receipt Card (if exists) -->
            @if (!string.IsNullOrEmpty(Model.ComprobanteRuta))
            {
                <div class="card mt-4">
                    <div class="card-header bg-secondary text-white">
                        <h6 class="card-title mb-0"><i class="bi bi-file-earmark me-2"></i>Comprobante</h6>
                    </div>
                    <div class="card-body text-center">
                        <i class="bi bi-file-earmark-pdf text-danger fs-1"></i>
                        <h6 class="mt-2">@Model.ComprobanteNombre</h6>
                        <p class="text-muted small">El comprobante se mantendrá disponible después de la anulación</p>
                        <a href="@Model.ComprobanteRuta" target="_blank" class="btn btn-sm btn-outline-primary"><i class="bi bi-eye me-1"></i>Ver Comprobante</a>
                    </div>
                </div>
            }

            <!-- Property Statistics Card -->
            @if (ViewBag.EstadisticasInmueble != null)
            {
                <div class="card mt-4 border-warning">
                    <div class="card-header bg-warning text-dark">
                        <h6 class="card-title mb-0"><i class="bi bi-graph-up me-2"></i>Impacto en Venta</h6>
                    </div>
                    <div class="card-body">
                        @{
                            var totalPagos = GetPropertyValueAsInt(ViewBag.EstadisticasInmueble, "TotalPagos");
                            var montoPagado = GetPropertyValueAsDecimal(ViewBag.EstadisticasInmueble, "MontoPagado");
                            var montoEstePago = Model.MontoTotal;
                        }
                        <div class="row text-center">
                            <div class="col-12 mb-2"><strong>Pagos totales del inmueble:</strong> @totalPagos</div>
                            <div class="col-6">
                                <div class="border-end"><div class="text-success fw-bold">@montoPagado.ToString("C")</div><small class="text-muted">Total pagado</small></div>
                            </div>
                            <div class="col-6"><div class="text-danger fw-bold">@montoEstePago.ToString("C")</div><small class="text-muted">Se descontará</small></div>
                        </div>
                        <div class="mt-3 p-2 bg-light rounded"><small class="text-muted"><i class="bi bi-exclamation-circle me-1"></i>Después de anular quedará: <strong>@((montoPagado - montoEstePago).ToString("C"))</strong></small></div>
                    </div>
                </div>
            }

            <!-- Alternative Actions Card -->
            <div class="card mt-4 border-success">
                <div class="card-header bg-success text-white">
                    <h6 class="card-title mb-0"><i class="bi bi-lightbulb me-2"></i>¿Busca otra solución?</h6>
                </div>
                <div class="card-body">
                    <p class="small">Antes de anular, considere estas alternativas:</p>
                    <div class="d-grid gap-2">
                        <a href="@Url.Action("Edit", new { id = Model.IdPago })" class="btn btn-outline-primary btn-sm"><i class="bi bi-pencil me-1"></i>Editar Pago</a>
                        <a href="@Url.Action("Create", new { inmuebleId = Model.IdInmueble })" class="btn btn-outline-success btn-sm"><i class="bi bi-plus-circle me-1"></i>Crear Nuevo Pago</a>
                        <a href="@Url.Action("PorInmueble", new { inmuebleId = Model.IdInmueble })" class="btn btn-outline-info btn-sm"><i class="bi bi-list me-1"></i>Ver Historial Completo</a>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

<!-- JavaScript Section -->
@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const confirmarAnulacion = document.getElementById('confirmarAnulacion');
            const confirmarImpacto = document.getElementById('confirmarImpacto');
            const btnAnular = document.getElementById('btnAnular');
            
            function validarFormulario() {
                if (confirmarAnulacion && confirmarImpacto && btnAnular) {
                    btnAnular.disabled = !(confirmarAnulacion.checked && confirmarImpacto.checked);
                }
            }
            
            if (confirmarAnulacion) confirmarAnulacion.addEventListener('change', validarFormulario);
            if (confirmarImpacto) confirmarImpacto.addEventListener('change', validarFormulario);
            
            const deleteForm = document.getElementById('deleteForm');
            if (deleteForm) {
                deleteForm.addEventListener('submit', function(e) {
                    const confirmMessage = '¿Está completamente seguro de que desea anular este pago de venta? Esta acción no se puede deshacer.';
                    if (!confirm(confirmMessage)) e.preventDefault();
                });
            }
        });
    </script>
}

<!-- Helper Functions -->
@functions {
    private string GetEstadoBadgeClass(string estado)
    {
        return estado?.ToLower() switch
        {
            "activo" => "success",
            "pendiente" => "warning",
            "anulado" => "danger",
            "cancelado" => "secondary",
            _ => "primary"
        };
    }

    private string GetTipoPagoBadgeClass(string concepto)
    {
        if (string.IsNullOrEmpty(concepto)) return "secondary";
        return concepto.ToLower() switch
        {
            var c when c.Contains("seña") => "info",
            var c when c.Contains("anticipo") => "primary",
            var c when c.Contains("saldo") => "success",
            var c when c.Contains("total") => "warning",
            _ => "secondary"
        };
    }

    private string GetTipoPagoFromConcepto(string concepto)
    {
        if (string.IsNullOrEmpty(concepto)) return "Pago";
        return concepto.ToLower() switch
        {
            var c when c.Contains("seña") => "Seña",
            var c when c.Contains("anticipo") => "Anticipo",
            var c when c.Contains("saldo") => "Saldo",
            var c when c.Contains("total") => "Pago Total",
            _ => "Pago"
        };
    }

    private string GetEstadoInmuebleBadgeClass(string estado)
    {
        return estado?.ToLower() switch
        {
            "disponible" => "success",
            "reservado" => "warning",
            "vendido" => "danger",
            "alquilado" => "info",
            _ => "secondary"
        };
    }

    private int GetPropertyValueAsInt(object obj, string propertyName)
    {
        if (obj == null) return 0;
        var property = obj.GetType().GetProperty(propertyName);
        if (property != null)
        {
            var value = property.GetValue(obj);
            return value != null ? Convert.ToInt32(value) : 0;
        }
        return 0;
    }

    private decimal GetPropertyValueAsDecimal(object obj, string propertyName)
    {
        if (obj == null) return 0;
        var property = obj.GetType().GetProperty(propertyName);
        if (property != null)
        {
            var value = property.GetValue(obj);
            return value != null ? Convert.ToDecimal(value) : 0;
        }
        return 0;
    }
}