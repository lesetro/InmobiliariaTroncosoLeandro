@model Inmobiliaria_troncoso_leandro.Models.Pago
@{
    ViewData["Title"] = "Detalles del Pago";
}

<!-- Breadcrumb Navigation -->
<nav aria-label="breadcrumb" class="mb-4">
    <ol class="breadcrumb">
        <li class="breadcrumb-item"><a href="@Url.Action("Index", "Home")">Inicio</a></li>
        <li class="breadcrumb-item"><a href="@Url.Action("Index", "Ventas")">Ventas</a></li>
        <li class="breadcrumb-item active">Detalles</li>
    </ol>
</nav>

<!-- Page Header -->
<div class="d-flex justify-content-between align-items-center mb-4">
    <div>
        <h2><i class="bi bi-receipt me-2"></i>Detalles del Pago</h2>
        <p class="text-muted mb-0">Información completa del pago #@Model.IdPago</p>
    </div>
    <div>
        @if (User.IsInRole("administrador"))
        {

        <a href="@Url.Action("Edit", new { id = Model.IdPago })" class="btn btn-warning" @(Model.Estado.ToLower() == "anulado" ? "disabled" : "")>
            <i class="bi bi-pencil me-1"></i>Editar
        </a>
        }
        <a href="@Url.Action("PorInmueble", new { inmuebleId = Model.IdInmueble })" class="btn btn-info ms-2">
            <i class="bi bi-building me-1"></i>Ver Historial
        </a>
        <a href="@Url.Action("Index")" class="btn btn-secondary ms-2">
            <i class="bi bi-arrow-left me-1"></i>Volver
        </a>
    </div>
</div>

<!-- Alert Messages -->
@if (TempData["ErrorMessage"] != null)
{
    <div class="alert alert-danger alert-dismissible fade show" role="alert">
        <i class="bi bi-exclamation-triangle me-2"></i>@TempData["ErrorMessage"]
        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
    </div>
}

@if (TempData["SuccessMessage"] != null)
{
    <div class="alert alert-success alert-dismissible fade show" role="alert">
        <i class="bi bi-check-circle me-2"></i>@TempData["SuccessMessage"]
        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
    </div>
}

<div class="row">
    <!-- Left Column: Payment Information -->
    <div class="col-md-8">
        <!-- Payment Details Card -->
        <div class="card">
            <div class="card-header bg-primary text-white">
                <h5 class="card-title mb-0"><i class="bi bi-receipt me-2"></i>Información del Pago</h5>
            </div>
            <div class="card-body">
                <div class="row">
                    <div class="col-md-6">
                        <table class="table table-borderless">
                            <tr>
                                <td class="fw-semibold">ID del Pago:</td>
                                <td><span class="badge bg-success fs-6">#@Model.IdPago</span></td>
                            </tr>
                            <tr>
                                <td class="fw-semibold">Número de Pago:</td>
                                <td><span class="badge bg-secondary">@Model.NumeroPago</span></td>
                            </tr>
                            <tr>
                                <td class="fw-semibold">Concepto:</td>
                                <td>@Model.Concepto</td>
                            </tr>
                            <tr>
                                <td class="fw-semibold">Fecha de Pago:</td>
                                <td>@Model.FechaPago.ToString("dd/MM/yyyy")</td>
                            </tr>
                            <tr>
                                <td class="fw-semibold">Estado:</td>
                                <td>
                                    <span class="badge bg-@(GetEstadoBadgeClass(Model.Estado)) fs-6">
                                        @Model.Estado.ToUpper()
                                    </span>
                                </td>
                            </tr>
                        </table>
                    </div>
                    <div class="col-md-6">
                        <table class="table table-borderless">
                            <tr>
                                <td class="fw-semibold">Monto:</td>
                                <td class="fw-bold fs-4 text-success">@Model.MontoTotal.ToString("C")</td>
                            </tr>
                            <tr>
                                <td class="fw-semibold">Tipo:</td>
                                <td>
                                    <span class="badge bg-@(GetTipoPagoBadgeClass(Model.Concepto)) px-3 fs-6">
                                        @GetTipoPagoFromConcepto(Model.Concepto)
                                    </span>
                                </td>
                            </tr>
                            
                        </table>
                    </div>
                </div>

                <!-- Observaciones -->
                @if (!string.IsNullOrEmpty(Model.Observaciones))
                {
                    <div class="mt-3">
                        <label class="fw-semibold">Observaciones:</label>
                        <div class="border rounded p-3 bg-light">
                            @Model.Observaciones
                        </div>
                    </div>
                }
            </div>
        </div>

        <!-- Property Information Card -->
        <div class="card mt-4">
            <div class="card-header bg-light">
                <h5 class="card-title mb-0"><i class="bi bi-building me-2"></i>Inmueble Relacionado</h5>
            </div>
            <div class="card-body">
                <div class="d-flex align-items-center">
                    <div class="bg-success bg-opacity-10 rounded p-3 me-3">
                        <i class="bi bi-building text-success fs-2"></i>
                    </div>
                    <div class="flex-grow-1">
                        <h5 class="mb-1">@Model.Inmueble?.Direccion</h5>
                        <p class="text-muted mb-1">ID: @Model.IdInmueble</p>
                        @if (ViewBag.EstadoInmueble != null)
                        {
                            <span class="badge bg-@(GetEstadoInmuebleBadgeClass(ViewBag.EstadoInmueble?.ToString()))">
                                Estado: @(ViewBag.EstadoInmueble?.ToString() ?? "Disponible")
                            </span>
                        }
                    </div>
                    <div>
                        <a href="@Url.Action("PorInmueble", new { inmuebleId = Model.IdInmueble })" class="btn btn-outline-primary">
                            <i class="bi bi-clock-history me-1"></i>Ver Historial
                        </a>
                    </div>
                </div>
            </div>
        </div>

        <!-- Receipt Information -->
        @if (!string.IsNullOrEmpty(Model.ComprobanteRuta))
        {
            <div class="card mt-4">
                <div class="card-header bg-secondary text-white">
                    <h5 class="card-title mb-0"><i class="bi bi-file-earmark me-2"></i>Comprobante</h5>
                </div>
                <div class="card-body">
                    <div class="d-flex align-items-center">
                        <i class="bi bi-file-earmark-pdf text-danger fs-1 me-3"></i>
                        <div class="flex-grow-1">
                            <h6>@Model.ComprobanteNombre</h6>
                            <p class="text-muted mb-0">Comprobante adjunto al pago</p>
                        </div>
                        <div>
                            <a href="@Model.ComprobanteRuta" target="_blank" class="btn btn-primary me-2">
                                <i class="bi bi-eye me-1"></i>Ver Comprobante
                            </a>
                            <a href="@Model.ComprobanteRuta" download class="btn btn-outline-secondary">
                                <i class="bi bi-download me-1"></i>Descargar
                            </a>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>

    <!-- Right Column: Sidebar Information -->
    <div class="col-md-4">
        <!-- Statistics Card -->
        @if (ViewBag.EstadisticasInmueble != null)
        {
            <div class="card border-info">
                <div class="card-header bg-info text-white">
                    <h6 class="card-title mb-0"><i class="bi bi-graph-up me-2"></i>Estadísticas del Inmueble</h6>
                </div>
                <div class="card-body">
                    @{
                        var stats = ViewBag.EstadisticasInmueble;
                        var totalPagos = GetPropertyValueAsInt(stats, "TotalPagos");
                        var montoPagado = GetPropertyValueAsDecimal(stats, "MontoPagado");
                        var precioTotal = GetPropertyValueAsDecimal(stats, "PrecioTotal");
                        var saldoPendiente = GetPropertyValueAsDecimal(stats, "SaldoPendiente");
                        var porcentajePagado = GetPropertyValueAsDecimal(stats, "PorcentajePagado");
                        var contratoActivo = GetPropertyValueAsBool(stats, "ContratoActivo");
                    }
                    
                    <div class="text-center mb-3">
                        <div class="progress" style="height: 20px;">
                            <div class="progress-bar bg-success" style="width: @porcentajePagado%">
                                @porcentajePagado.ToString("F0")%
                            </div>
                        </div>
                        <small class="text-muted">Progreso de pago</small>
                    </div>
                    
                    <div class="list-group list-group-flush">
                        <div class="list-group-item px-0 border-0">
                            <div class="d-flex justify-content-between">
                                <span>Total Pagado:</span>
                                <strong class="text-success">@montoPagado.ToString("C")</strong>
                            </div>
                        </div>
                        <div class="list-group-item px-0 border-0">
                            <div class="d-flex justify-content-between">
                                <span>Saldo Pendiente:</span>
                                <strong class="text-warning">@saldoPendiente.ToString("C")</strong>
                            </div>
                        </div>
                        <div class="list-group-item px-0 border-0">
                            <div class="d-flex justify-content-between">
                                <span>Precio Total:</span>
                                <strong>@precioTotal.ToString("C")</strong>
                            </div>
                        </div>
                        <div class="list-group-item px-0 border-0">
                            <div class="d-flex justify-content-between">
                                <span>Total de Pagos:</span>
                                <strong>@totalPagos</strong>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        }

        <!-- User Information Card -->
        <div class="card mt-4">
            <div class="card-header bg-light">
                <h6 class="card-title mb-0"><i class="bi bi-person me-2"></i>Información del Usuario</h6>
            </div>
            <div class="card-body">
                <div class="d-flex align-items-center">
                    <i class="bi bi-person-circle text-primary fs-2 me-3"></i>
                    <div>
                        <h6 class="mb-0">@Model.UsuarioCreador?.Nombre @Model.UsuarioCreador?.Apellido</h6>
                        <small class="text-muted">Usuario creador</small>
                    </div>
                </div>
                <hr>
                
            </div>
        </div>

        <!-- Quick Actions Card -->
        <div class="card mt-4 border-warning">
            <div class="card-header bg-warning text-dark">
                <h6 class="card-title mb-0"><i class="bi bi-lightning me-2"></i>Acciones Rápidas</h6>
            </div>
            <div class="card-body">
                <div class="d-grid gap-2">
                    @if (Model.Estado.ToLower() != "anulado")
                    {   
                        @if (User.IsInRole("administrador"))
                        {

                        <a href="@Url.Action("Edit", new { id = Model.IdPago })" class="btn btn-warning btn-sm">
                            <i class="bi bi-pencil me-1"></i>Editar Pago
                        </a>
                        }
                        @if (Model.Estado.ToLower() == "pendiente")
                        {
                            <button class="btn btn-success btn-sm" onclick="marcarComoPagado(@Model.IdPago)">
                                <i class="bi bi-check-circle me-1"></i>Marcar como Pagado
                            </button>
                        }
                        @if (User.IsInRole("administrador"))
                        {

                        <a href="@Url.Action("Delete", new { id = Model.IdPago })" class="btn btn-danger btn-sm">
                            <i class="bi bi-x-circle me-1"></i>Anular Pago
                        </a>
                        
                        }
                    }
                    
                    <a href="@Url.Action("Create", new { inmuebleId = Model.IdInmueble })" class="btn btn-success btn-sm">
                        <i class="bi bi-plus-circle me-1"></i>Nuevo Pago
                    </a>
                    
                    <a href="@Url.Action("PorInmueble", new { inmuebleId = Model.IdInmueble })" class="btn btn-info btn-sm">
                        <i class="bi bi-building me-1"></i>Ver Todos los Pagos
                    </a>
                </div>
            </div>
        </div>

        <!-- Status Information -->
        <div class="card mt-4">
            <div class="card-header bg-light">
                <h6 class="card-title mb-0"><i class="bi bi-info-circle me-2"></i>Información de Estado</h6>
            </div>
            <div class="card-body">
                @if (Model.Estado.ToLower() == "anulado")
                {
                    <div class="alert alert-warning mb-0">
                        <i class="bi bi-exclamation-triangle me-2"></i>
                        <strong>Este pago está anulado.</strong> No se pueden realizar modificaciones.
                    </div>
                }
                else if (Model.Estado.ToLower() == "pendiente")
                {
                    <div class="alert alert-info mb-0">
                        <i class="bi bi-clock me-2"></i>
                        <strong>Pago pendiente.</strong> Esperando confirmación de pago.
                    </div>
                }
                else
                {
                    <div class="alert alert-success mb-0">
                        <i class="bi bi-check-circle me-2"></i>
                        <strong>Pago completado.</strong> El pago ha sido confirmado.
                    </div>
                }
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        function marcarComoPagado(idPago) {
            if (confirm('¿Confirma que desea marcar este pago como pagado?')) {
                fetch(`@Url.Action("MarcarComoPagado", "Ventas")?idPago=${idPago}`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value
                    }
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        location.reload();
                    } else {
                        alert(data.message || 'Error al marcar el pago como pagado');
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    alert('Error de conexión');
                });
            }
        }
    </script>
}

@functions {
    private string GetEstadoBadgeClass(string estado)
    {
        return estado?.ToLower() switch
        {
            "pagado" => "success",
            "pendiente" => "warning",
            "anulado" => "danger",
            _ => "secondary"
        };
    }

    private string GetTipoPagoBadgeClass(string concepto)
    {
        if (string.IsNullOrEmpty(concepto)) return "secondary";
        return concepto.ToLower() switch
        {
            var c when c.Contains("seña") => "warning",
            var c when c.Contains("anticipo") => "info",
            var c when c.Contains("saldo") => "primary",
            var c when c.Contains("total") => "success",
            _ => "secondary"
        };
    }

    private string GetTipoPagoFromConcepto(string concepto)
    {
        if (string.IsNullOrEmpty(concepto)) return "Pago";
        return concepto.ToLower() switch
        {
            var c when c.Contains("seña") => "Seña",
            var c when c.Contains("anticipo") => "Anticipo",
            var c when c.Contains("saldo") => "Saldo",
            var c when c.Contains("total") => "Pago Total",
            _ => "Pago"
        };
    }

    private string GetEstadoInmuebleBadgeClass(string estado)
    {
        return estado?.ToLower() switch
        {
            "disponible" => "success",
            "reservado" => "warning",
            "vendido" => "danger",
            "alquilado" => "info",
            _ => "secondary"
        };
    }

    private int GetPropertyValueAsInt(object obj, string propertyName)
    {
        if (obj == null) return 0;
        var property = obj.GetType().GetProperty(propertyName);
        if (property != null)
        {
            var value = property.GetValue(obj);
            return value != null ? Convert.ToInt32(value) : 0;
        }
        return 0;
    }

    private decimal GetPropertyValueAsDecimal(object obj, string propertyName)
    {
        if (obj == null) return 0;
        var property = obj.GetType().GetProperty(propertyName);
        if (property != null)
        {
            var value = property.GetValue(obj);
            return value != null ? Convert.ToDecimal(value) : 0;
        }
        return 0;
    }

    private bool GetPropertyValueAsBool(object obj, string propertyName)
    {
        if (obj == null) return false;
        var property = obj.GetType().GetProperty(propertyName);
        if (property != null)
        {
            var value = property.GetValue(obj);
            return value != null ? Convert.ToBoolean(value) : false;
        }
        return false;
    }
}