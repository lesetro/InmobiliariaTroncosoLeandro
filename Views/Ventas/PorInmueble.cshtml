@model IEnumerable<Inmobiliaria_troncoso_leandro.Models.Pago>
@{
    ViewData["Title"] = "Pagos por Inmueble";
    var primerPago = Model?.FirstOrDefault();
    var inmuebleId = ViewBag.InmuebleId ?? primerPago?.IdInmueble;
}

<nav aria-label="breadcrumb" class="mb-4">
    <ol class="breadcrumb">
        <li class="breadcrumb-item"><a href="@Url.Action("Index", "Home")">Inicio</a></li>
        <li class="breadcrumb-item"><a href="@Url.Action("Index", "Pagos")">Pagos</a></li>
        <li class="breadcrumb-item"><a href="@Url.Action("Index", "Ventas")">Ventas</a></li>
        <li class="breadcrumb-item active">Por Inmueble</li>
    </ol>
</nav>

<div class="d-flex justify-content-between align-items-center mb-4">
    <div>
        <h2><i class="bi bi-building me-2"></i>Pagos del Inmueble</h2>
        @if (primerPago != null)
        {
            <p class="text-muted mb-0">
                <strong>@primerPago.Inmueble?.Direccion</strong>
                | ID: @inmuebleId
            </p>
        }
    </div>
    <div>
        <a href="@Url.Action("Create", "Ventas", new { inmuebleId = inmuebleId })" class="btn btn-success">
            <i class="bi bi-plus-circle me-1"></i>Nuevo Pago
        </a>
        <a href="@Url.Action("Index", "Ventas")" class="btn btn-secondary ms-2">
            <i class="bi bi-arrow-left me-1"></i>Volver a Lista
        </a>
    </div>
</div>

@if (TempData["ErrorMessage"] != null)
{
    <div class="alert alert-danger alert-dismissible fade show" role="alert">
        <i class="bi bi-exclamation-triangle me-2"></i>
        @TempData["ErrorMessage"]
        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
    </div>
}

@if (TempData["SuccessMessage"] != null)
{
    <div class="alert alert-success alert-dismissible fade show" role="alert">
        <i class="bi bi-check-circle me-2"></i>
        @TempData["SuccessMessage"]
        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
    </div>
}

@if (Model != null && Model.Any())
{
    <!-- Resumen del inmueble -->
    <div class="row mb-4">
        <div class="col-md-3">
            <div class="card border-success">
                <div class="card-body text-center">
                    <i class="bi bi-receipt text-success fs-2"></i>
                    <h4 class="card-title text-success mt-2">@Model.Count()</h4>
                    <p class="card-text">Total Pagos</p>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card border-primary">
                <div class="card-body text-center">
                    <i class="bi bi-currency-dollar text-primary fs-2"></i>
                    <h4 class="card-title text-primary mt-2">@Model.Sum(p => p.MontoTotal).ToString("C0")</h4>
                    <p class="card-text">Total Recaudado</p>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card border-warning">
                <div class="card-body text-center">
                    <i class="bi bi-percent text-warning fs-2"></i>
                    <h4 class="card-title text-warning mt-2">
                        @{
                            var porcentajePagados = Model.Any() ? (Model.Count(p => p.Estado == "pagado") * 100.0 / Model.Count()) : 0;
                        }
                        @porcentajePagados.ToString("F0")%
                    </h4>
                    <p class="card-text">Completado</p>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card border-info">
                <div class="card-body text-center">
                    <i class="bi bi-calendar text-info fs-2"></i>
                    <h4 class="card-title text-info mt-2">
                        @Model.OrderByDescending(p => p.FechaPago).First().FechaPago.ToString("dd/MM")
                    </h4>
                    <p class="card-text">Último Pago</p>
                </div>
            </div>
        </div>
    </div>

    <!-- Estado del proceso de venta -->
    {
        var tieneSeña = Model.Any(p => p.Concepto.ToLower().Contains("seña"));
        var tieneAnticipo = Model.Any(p => p.Concepto.ToLower().Contains("anticipo"));
        var tieneTotal = Model.Any(p => p.Concepto.ToLower().Contains("total") || p.Concepto.ToLower().Contains("completo"));
        var estaVendido = ViewBag.EstadoInmueble?.ToString().ToLower() == "vendido";
    }

    <div class="card mb-4 border-info">
        <div class="card-header bg-info text-white">
            <h5 class="card-title mb-0">
                <i class="bi bi-diagram-3 me-2"></i>Proceso de Venta
            </h5>
        </div>
        <div class="card-body">
            <div class="row text-center">
                <div class="col-md-3">
                    <div class="d-flex flex-column align-items-center">
                        <div class="bg-@@(tieneSeña ? "success" : "light") rounded-circle p-3 mb-2">
                            <i class="bi bi-piggy-bank fs-4 text-@@(tieneSeña ? "white" : "muted")"></i>
                        </div>
                        <h6 class="text-@@(tieneSeña ? "success" : "muted")">Seña</h6>
                        <small class="text-@@(tieneSeña ? "success" : "muted")">@@(tieneSeña ? "✓ Recibida" : "Pendiente")</small>
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="d-flex flex-column align-items-center">
                        <div class="bg-@@(tieneAnticipo ? "success" : "light") rounded-circle p-3 mb-2">
                            <i class="bi bi-cash fs-4 text-@@(tieneAnticipo ? "white" : "muted")"></i>
                        </div>
                        <h6 class="text-@@(tieneAnticipo ? "success" : "muted")">Anticipo</h6>
                        <small class="text-@@(tieneAnticipo ? "success" : "muted")">@@(tieneAnticipo ? "✓ Pagado" : "Pendiente")</small>
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="d-flex flex-column align-items-center">
                        <div class="bg-@@(tieneTotal ? "success" : "light") rounded-circle p-3 mb-2">
                            <i class="bi bi-currency-exchange fs-4 text-@@(tieneTotal ? "white" : "muted")"></i>
                        </div>
                        <h6 class="text-@@(tieneTotal ? "success" : "muted")">Pago Final</h6>
                        <small class="text-@@(tieneTotal ? "success" : "muted")">@@(tieneTotal ? "✓ Completado" : "Pendiente")</small>
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="d-flex flex-column align-items-center">
                        <div class="bg-@@(estaVendido ? "success" : "warning") rounded-circle p-3 mb-2">
                            <i class="bi bi-house-check fs-4 text-@@(estaVendido ? "white" : "dark")"></i>
                        </div>
                        <h6 class="text-@@(estaVendido ? "success" : "warning")">Escritura</h6>
                        <small class="text-@@(estaVendido ? "success" : "warning")">@@(estaVendido ? "✓ Vendido" : "Pendiente")</small>
                    </div>
                </div>
            </div>
            
            <!-- Barra de progreso -->
            <div class="progress mt-3" style="height: 8px;">
                @@{
                    var progreso = 0;
                    if (tieneSeña) progreso += 25;
                    if (tieneAnticipo) progreso += 25;
                    if (tieneTotal) progreso += 25;
                    if (estaVendido) progreso += 25;
                }
                <div class="progress-bar bg-success" style="width: @@progreso%"></div>
            </div>
            <div class="text-center mt-2">
                <small class="text-muted">Progreso: @@progreso% completado</small>
            </div>
        </div>
    </div>

    <!-- Historial completo de pagos -->
    <div class="card">
        <div class="card-header d-flex justify-content-between align-items-center">
            <h5 class="card-title mb-0">
                <i class="bi bi-clock-history me-2"></i>Historial de Pagos - @@Model.Count() registros
            </h5>
            <div class="btn-group" role="group">
                <button type="button" class="btn btn-sm btn-outline-primary" onclick="exportarHistorial()">
                    <i class="bi bi-download me-1"></i>Exportar
                </button>
                <button type="button" class="btn btn-sm btn-outline-info" onclick="imprimirHistorial()">
                    <i class="bi bi-printer me-1"></i>Imprimir
                </button>
            </div>
        </div>
        <div class="card-body p-0">
            <div class="table-responsive">
                <table class="table table-hover mb-0" id="historialTable">
                    <thead class="table-success">
                        <tr>
                            <th><i class="bi bi-hash me-1"></i>ID</th>
                            <th><i class="bi bi-calendar-event me-1"></i>Fecha</th>
                            <th><i class="bi bi-chat-text me-1"></i>Concepto</th>
                            <th><i class="bi bi-currency-dollar me-1"></i>Monto</th>
                            <th><i class="bi bi-tag me-1"></i>Tipo</th>
                            <th><i class="bi bi-check-circle me-1"></i>Estado</th>
                            <th><i class="bi bi-file-earmark me-1"></i>Comprobante</th>
                            <th>Acciones</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var pago in Model.OrderBy(p => p.FechaPago))
                        {
                            var rowClass = pago.Estado switch
                            {
                                "pagado" => "",
                                "pendiente" => "table-warning",
                                "anulado" => "table-secondary",
                                _ => ""
                            };

                            <tr class="@rowClass">
                                <td class="fw-bold text-center">
                                    <span class="badge bg-primary fs-6">#@pago.IdPago</span>
                                </td>
                                <td>
                                    <div class="fw-semibold">@pago.FechaPago.ToString("dd/MM/yyyy")</div>
                                    <small class="text-muted">@pago.FechaPago.ToString("HH:mm")</small>
                                </td>
                                <td>
                                    <div class="fw-semibold">@pago.Concepto</div>
                                    @if (!string.IsNullOrEmpty(pago.Observaciones))
                                    {
                                        <small class="text-muted">
                                            @(pago.Observaciones.Length > 50 ? pago.Observaciones.Substring(0, 50) + "..." : pago.Observaciones)
                                        </small>
                                    }
                                </td>
                                <td class="text-end">
                                    <div class="fw-bold fs-6">@pago.MontoTotal.ToString("C")</div>
                                </td>
                                <td class="text-center">
                                    <span class="badge bg-@(GetTipoPagoBadgeClass(pago.Concepto)) px-3">
                                        @GetTipoPagoFromConcepto(pago.Concepto)
                                    </span>
                                </td>
                                <td class="text-center">
                                    <span class="badge bg-@(GetEstadoBadgeClass(pago.Estado)) px-3">
                                        @pago.Estado.ToUpper()
                                    </span>
                                </td>
                                <td class="text-center">
                                    @if (!string.IsNullOrEmpty(pago.ComprobanteRuta))
                                    {
                                        <a href="@pago.ComprobanteRuta" target="_blank" class="btn btn-sm btn-outline-primary" title="Ver Comprobante">
                                            <i class="bi bi-file-earmark-pdf"></i>
                                        </a>
                                    }
                                    else
                                    {
                                        <span class="text-muted">-</span>
                                    }
                                </td>
                                <td>
                                    <div class="btn-group" role="group">
                                        <a href="@Url.Action("Details", new { id = pago.IdPago })" 
                                           class="btn btn-sm btn-outline-primary" title="Ver Detalles">
                                            <i class="bi bi-eye"></i>
                                        </a>
                                        @if (pago.Estado != "anulado")
                                        {
                                            <a href="@Url.Action("Edit", new { id = pago.IdPago })" 
                                               class="btn btn-sm btn-outline-warning" title="Editar">
                                                <i class="bi bi-pencil"></i>
                                            </a>
                                            @if (pago.Estado == "pendiente")
                                            {
                                                <button class="btn btn-sm btn-outline-success" 
                                                        onclick="marcarComoPagado(@pago.IdPago)" 
                                                        title="Marcar como Pagado">
                                                    <i class="bi bi-check-circle"></i>
                                                </button>
                                            }
                                        }
                                    </div>
                                </td>
                            </tr>
                        }
                    </tbody>
                    
                    <!-- Fila de totales -->
                    <tfoot class="table-success">
                        <tr>
                            <th colspan="3" class="text-end">TOTALES:</th>
                            <th class="text-end fs-5">@Model.Sum(p => p.MontoTotal).ToString("C")</th>
                            <th colspan="4"></th>
                        </tr>
                    </tfoot>
                </table>
            </div>
        </div>
    </div>

    <!-- Información adicional -->
    <div class="row mt-4">
        <div class="col-md-6">
            <div class="card">
                <div class="card-header">
                    <h6 class="card-title mb-0">
                        <i class="bi bi-graph-up me-2"></i>Estadísticas Detalladas
                    </h6>
                </div>
                <div class="card-body">
                    @{
                        var pagosPagados = Model.Where(p => p.Estado == "pagado").ToList();
                        var pagosPendientes = Model.Where(p => p.Estado == "pendiente").ToList();
                        var pagosAnulados = Model.Where(p => p.Estado == "anulado").ToList();
                    }
                    
                    <div class="row text-center">
                        <div class="col-4">
                            <div class="border-end">
                                <h5 class="text-success">@pagosPagados.Count</h5>
                                <small class="text-muted">Pagados</small>
                                <div class="small text-success fw-semibold">@pagosPagados.Sum(p => p.MontoTotal).ToString("C")</div>
                            </div>
                        </div>
                        <div class="col-4">
                            <div class="border-end">
                                <h5 class="text-warning">@pagosPendientes.Count</h5>
                                <small class="text-muted">Pendientes</small>
                                <div class="small text-warning fw-semibold">@pagosPendientes.Sum(p => p.MontoTotal).ToString("C")</div>
                            </div>
                        </div>
                        <div class="col-4">
                            <h5 class="text-secondary">@pagosAnulados.Count</h5>
                            <small class="text-muted">Anulados</small>
                            <div class="small text-secondary fw-semibold">@pagosAnulados.Sum(p => p.MontoTotal).ToString("C")</div>
                        </div>
                    </div>
                    
                    <hr>
                    
                    <div class="d-flex justify-content-between">
                        <div>
                            <strong>Promedio por pago:</strong><br>
                            <span class="text-info">@Model.Average(p => p.MontoTotal).ToString("C")</span>
                        </div>
                        <div class="text-end">
                            <strong>Rango:</strong><br>
                            <small class="text-muted">@Model.Min(p => p.MontoTotal).ToString("C") - @Model.Max(p => p.MontoTotal).ToString("C")</small>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        
        <div class="col-md-6">
            <div class="card">
                <div class="card-header">
                    <h6 class="card-title mb-0">
                        <i class="bi bi-info-circle me-2"></i>Información del Inmueble
                    </h6>
                </div>
                <div class="card-body">
                    @if (ViewBag.InmuebleDatos != null)
                    {
                        <div class="row">
                            <div class="col-6">
                                <strong>Estado Actual:</strong><br>
                                <span class="badge bg-@(GetEstadoInmuebleBadgeClass(ViewBag.EstadoInmueble?.ToString()))">
                                    @(ViewBag.EstadoInmueble?.ToString() ?? "Disponible")
                                </span>
                            </div>
                            <div class="col-6">
                                <strong>Precio:</strong><br>
                                <span class="fw-bold text-success">@GetPropertyValue(ViewBag.InmuebleDatos, "Precio", "C")</span>
                            </div>
                        </div>
                        <div class="row mt-3">
                            <div class="col-6">
                                <strong>Tipo:</strong><br>
                                <span class="text-muted">@GetPropertyValue(ViewBag.InmuebleDatos, "TipoInmueble")</span>
                            </div>
                            <div class="col-6">
                                <strong>Superficie:</strong><br>
                                <span class="text-muted">@GetPropertyValue(ViewBag.InmuebleDatos, "Superficie") m²</span>
                            </div>
                        </div>
                    }
                    
                    <hr>
                    
                    <div class="d-flex justify-content-between">
                        <div>
                            <strong>Primer pago:</strong><br>
                            <span class="text-info">@Model.OrderBy(p => p.FechaPago).First().FechaPago.ToString("dd/MM/yyyy")</span>
                        </div>
                        <div class="text-end">
                            <strong>Último pago:</strong><br>
                            <span class="text-info">@Model.OrderByDescending(p => p.FechaPago).First().FechaPago.ToString("dd/MM/yyyy")</span>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
}
else
{
    <div class="card">
        <div class="card-body text-center py-5">
            <i class="bi bi-building-x text-muted" style="font-size: 4rem;"></i>
            <h4 class="text-muted mt-3">No hay pagos para este inmueble</h4>
            <p class="text-muted">
                @if (inmuebleId != null)
                {
                    <text>El inmueble ID @inmuebleId no tiene pagos registrados aún.</text>
                }
                else
                {
                    <text>No se encontró el inmueble especificado.</text>
                }
            </p>
            <div class="mt-3">
                @if (inmuebleId != null)
                {
                    <a href="@Url.Action("Create", "Ventas", new { inmuebleId = inmuebleId })" class="btn btn-success me-2">
                        <i class="bi bi-plus-circle me-1"></i>Registrar Primer Pago
                    </a>
                }
                <a href="@Url.Action("Index", "Ventas")" class="btn btn-outline-secondary">
                    <i class="bi bi-arrow-left me-1"></i>Volver a Lista
                </a>
            </div>
        </div>
    </div>
}

@section Scripts {
    <script>
        function exportarHistorial() {
            const inmuebleId = @inmuebleId;
            window.open(`@Url.Action("ExportarPorInmueble", "Ventas")?inmuebleId=${inmuebleId}`, '_blank');
        }

        function imprimirHistorial() {
            window.print();
        }

        function marcarComoPagado(idPago) {
            if (confirm('¿Confirma que desea marcar este pago como pagado?')) {
                fetch(`@Url.Action("MarcarComoPagado", "Ventas")?idPago=${idPago}`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value
                    }
                })
                .then(response => {
                    if (response.ok) {
                        location.reload();
                    } else {
                        alert('Error al marcar el pago como pagado');
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    alert('Error de conexión');
                });
            }
        }
    </script>
}

<style>
    @@media print {
        .btn, .breadcrumb, .card-header .btn-group {
            display: none !important;
        }
        
        .card {
            border: none !important;
            box-shadow: none !important;
        }
    }
    
    .progress {
        border-radius: 10px;
    }
</style>

@functions {
    public string GetEstadoBadgeClass(string estado)
    {
        return estado?.ToLower() switch
        {
            "pagado" => "success",
            "pendiente" => "warning",
            "anulado" => "secondary",
            _ => "primary"
        };
    }
    
    public string GetTipoPagoBadgeClass(string concepto)
    {
        var conceptoLower = concepto?.ToLower() ?? "";
        
        if (conceptoLower.Contains("seña")) return "warning";
        if (conceptoLower.Contains("anticipo")) return "info";
        if (conceptoLower.Contains("total") || conceptoLower.Contains("completo")) return "success";
        if (conceptoLower.Contains("reserva")) return "secondary";
        
        return "primary";
    }
    
    public string GetTipoPagoFromConcepto(string concepto)
    {
        var conceptoLower = concepto?.ToLower() ?? "";
        
        if (conceptoLower.Contains("seña")) return "SEÑA";
        if (conceptoLower.Contains("anticipo")) return "ANTICIPO";
        if (conceptoLower.Contains("total") || conceptoLower.Contains("completo")) return "TOTAL";
        if (conceptoLower.Contains("reserva")) return "RESERVA";
        
        return "VENTA";
    }
    
    public string GetEstadoInmuebleBadgeClass(string estado)
    {
        return estado?.ToLower() switch
        {
            "vendido" => "success",
            "reservado" => "warning",
            "disponible" => "info",
            _ => "secondary"
        };
    }
    
    public static object GetPropertyValue(object obj, string propertyName, string format = "")
    {
        if (obj == null) return "N/A";
        
        try 
        {
            var property = obj.GetType().GetProperty(propertyName);
            if (property == null) return "N/A";
            
            var value = property.GetValue(obj);
            if (value == null) return "N/A";
            
            if (!string.IsNullOrEmpty(format))
            {
                if (value is DateTime dateTime)
                    return dateTime.ToString(format);
                if (value is decimal decimalValue)
                    return decimalValue.ToString(format);
                if (value is IFormattable formattable)
                    return formattable.ToString(format, null);
            }
            
            return value.ToString() ?? "N/A";
        }
        catch 
        {
            return "N/A";
        }
    }
}