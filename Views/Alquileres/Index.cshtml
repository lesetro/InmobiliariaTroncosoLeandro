@model IEnumerable<Inmobiliaria_troncoso_leandro.Models.Pago>
@{
    ViewData["Title"] = "Pagos de Alquiler";
}

<nav aria-label="breadcrumb" class="mb-4">
    <ol class="breadcrumb">
        <li class="breadcrumb-item"><a href="@Url.Action("Index", "Home")">Inicio</a></li>
        <li class="breadcrumb-item"><a href="@Url.Action("Index", "Pagos")">Pagos</a></li>
        <li class="breadcrumb-item active">Alquileres</li>
    </ol>
</nav>

<div class="d-flex justify-content-between align-items-center mb-4">
    <h2><i class="bi bi-house-door me-2"></i>Pagos de Alquiler</h2>
    <div>
        <a href="@Url.Action("Create", "Alquileres")" class="btn btn-primary">
            <i class="bi bi-plus-circle me-1"></i>Nuevo Pago
        </a>
        <div class="btn-group ms-2">
            <button type="button" class="btn btn-outline-secondary dropdown-toggle" data-bs-toggle="dropdown">
                <i class="bi bi-funnel me-1"></i>Filtros
            </button>
            <ul class="dropdown-menu">
                <li><a class="dropdown-item" href="@Url.Action("Index", new { estado = "" })">
                    <i class="bi bi-list me-2"></i>Todos
                </a></li>
                <li><a class="dropdown-item" href="@Url.Action("Index", new { estado = "pagado" })">
                    <i class="bi bi-check-circle me-2 text-success"></i>Pagados
                </a></li>
                <li><a class="dropdown-item" href="@Url.Action("Index", new { estado = "pendiente" })">
                    <i class="bi bi-clock me-2 text-warning"></i>Pendientes
                </a></li>
                <li><a class="dropdown-item" href="@Url.Action("Index", new { estado = "conMora" })">
                    <i class="bi bi-exclamation-triangle me-2 text-danger"></i>Con Mora
                </a></li>
                <li><hr class="dropdown-divider"></li>
                <li><a class="dropdown-item" href="@Url.Action("Alertas", "Reportes")">
                    <i class="bi bi-bell me-2 text-danger"></i>Ver Alertas
                </a></li>
            </ul>
        </div>
    </div>
</div>

@if (TempData["ErrorMessage"] != null)
{
    <div class="alert alert-danger alert-dismissible fade show" role="alert">
        <i class="bi bi-exclamation-triangle me-2"></i>
        @TempData["ErrorMessage"]
        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
    </div>
}

@if (TempData["SuccessMessage"] != null)
{
    <div class="alert alert-success alert-dismissible fade show" role="alert">
        <i class="bi bi-check-circle me-2"></i>
        @TempData["SuccessMessage"]
        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
    </div>
}

<!-- Barra de búsqueda y filtros -->
<div class="card mb-4">
    <div class="card-body">
        <form method="get" id="filtrosForm">
            <div class="row g-3">
                <div class="col-md-6">
                    <label for="buscar" class="form-label">
                        <i class="bi bi-search me-1"></i>Buscar
                    </label>
                    <input type="text" class="form-control" id="buscar" name="buscar" 
                           value="@ViewBag.Buscar" placeholder="Dirección del inmueble...">
                </div>
                <div class="col-md-3">
                    <label for="estado" class="form-label">
                        <i class="bi bi-filter me-1"></i>Estado
                    </label>
                    <select class="form-select" id="estado" name="estado">
                        <option value="">Todos los estados</option>
                        <option value="pagado" @@(ViewBag.Estado == "pagado" ? "selected" : "")>Pagado</option>
                        <option value="pendiente" @@(ViewBag.Estado == "pendiente" ? "selected" : "")>Pendiente</option>
                        <option value="anulado"@@(ViewBag.Estado == "anulado" ? "selected" : "")>Anulado</option>
                        <option value="conMora" @@(ViewBag.Estado == "conMora" ? "selected" : "")>Con Mora</option>
                    </select>
                </div>
                <div class="col-md-3 d-flex align-items-end">
                    <button type="submit" class="btn btn-primary me-2">
                        <i class="bi bi-search me-1"></i>Buscar
                    </button>
                    <a href="@Url.Action("Index")" class="btn btn-outline-secondary">
                        <i class="bi bi-x-circle me-1"></i>Limpiar
                    </a>
                </div>
            </div>
        </form>
    </div>
</div>

<!-- Resultados -->
@if (Model != null && Model.Any())
{
    <div class="card">
        <div class="card-header d-flex justify-content-between align-items-center">
            <h5 class="card-title mb-0">
                <i class="bi bi-table me-2"></i>Pagos de Alquiler 
                <span class="badge bg-primary ms-2">@ViewBag.TotalRegistros registros</span>
            </h5>
            <div class="text-muted">
                Página @ViewBag.PaginaActual de @ViewBag.TotalPaginas
            </div>
        </div>
        <div class="card-body p-0">
            <div class="table-responsive">
                <table class="table table-hover mb-0">
                    <thead class="table-light">
                        <tr>
                            <th><i class="bi bi-hash me-1"></i>Pago #</th>
                            <th><i class="bi bi-house-door me-1"></i>Inmueble</th>
                            <th><i class="bi bi-person me-1"></i>Inquilino</th>
                            <th><i class="bi bi-calendar me-1"></i>Fecha Pago</th>
                            <th><i class="bi bi-calendar-x me-1"></i>Vencimiento</th>
                            <th><i class="bi bi-currency-dollar me-1"></i>Monto</th>
                            <th><i class="bi bi-clock-history me-1"></i>Mora</th>
                            <th><i class="bi bi-check-circle me-1"></i>Estado</th>
                            <th>Acciones</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var pago in Model)
                        {
                            <tr class="pago-row" data-contrato-id="@pago.IdContrato" style="cursor: pointer;">
                                <td class="fw-semibold text-primary">#@pago.NumeroPago</td>
                                <td>
                                    <div class="fw-semibold">@pago.Inmueble?.Direccion</div>
                                    <small class="text-muted">@pago.Concepto</small>
                                </td>
                                <td>
                                    <div>@pago.Contrato?.Inquilino?.Usuario?.Nombre @pago.Contrato?.Inquilino?.Usuario?.Apellido</div>
                                    <small class="text-muted">Contrato #@pago.IdContrato</small>
                                </td>
                                <td>
                                    <span class="badge bg-light text-dark">
                                        @pago.FechaPago.ToString("dd/MM/yyyy")
                                    </span>
                                </td>
                                <td>
                                    @if (pago.FechaVencimiento.HasValue)
                                    {
                                        var diasDiferencia = (DateTime.Now.Date - pago.FechaVencimiento.Value.Date).Days;
                                        var badgeClass = diasDiferencia > 0 ? "bg-danger" : (diasDiferencia >= -7 ? "bg-warning" : "bg-success");
                                        
                                        <span class="badge @badgeClass">
                                            @pago.FechaVencimiento.Value.ToString("dd/MM/yyyy")
                                        </span>
                                    }
                                    else
                                    {
                                        <span class="text-muted">-</span>
                                    }
                                </td>
                                <td>
                                    <div class="fw-semibold">@pago.MontoTotal.ToString("C")</div>
                                    @if (pago.RecargoMora > 0)
                                    {
                                        <small class="text-muted">Base: @pago.MontoBase.ToString("C")</small>
                                    }
                                </td>
                                <td>
                                    @if (pago.DiasMora.HasValue && pago.DiasMora > 0)
                                    {
                                        <span class="badge bg-danger">
                                            @pago.DiasMora días
                                        </span>
                                        <div class="small text-danger fw-semibold">
                                            +@pago.RecargoMora.ToString("C")
                                        </div>
                                    }
                                    else
                                    {
                                        <span class="badge bg-success">Sin mora</span>
                                    }
                                </td>
                                <td>
                                    <span class="badge bg-@(GetEstadoBadgeClass(pago.Estado))">
                                        @pago.Estado.ToUpper()
                                    </span>
                                </td>
                                <td>
                                    <div class="btn-group" role="group">
                                        <a href="@Url.Action("Details", new { id = pago.IdPago })" 
                                           class="btn btn-sm btn-outline-primary" title="Ver Detalles">
                                            <i class="bi bi-eye"></i>
                                        </a>
                                         @if (User.IsInRole("administrador"))
                                        {
                                        <a href="@Url.Action("Edit", new { id = pago.IdPago })" 
                                           class="btn btn-sm btn-outline-warning" title="Editar">
                                            <i class="bi bi-pencil"></i>

                                        </a>
                                        @if (pago.Estado != "anulado")
                                        {
                                            <a href="@Url.Action("Delete", new { id = pago.IdPago })" 
                                               class="btn btn-sm btn-outline-danger" title="Anular">
                                                <i class="bi bi-x-circle"></i>
                                            </a>
                                        }
                                        }
                                        <button class="btn btn-sm btn-outline-info" 
                                                onclick="verHistorialContrato(@pago.IdContrato)" 
                                                title="Ver Historial Completo">
                                            <i class="bi bi-clock-history"></i>
                                        </button>
                                        
                                    </div>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>

        <!-- Paginación -->
        @if (ViewBag.TotalPaginas > 1)
        {
            <div class="card-footer">
                <nav aria-label="Navegación de páginas">
                    <ul class="pagination justify-content-center mb-0">
                        <!-- Primera página -->
                        @if (ViewBag.PaginaActual > 1)
                        {
                            <li class="page-item">
                                <a class="page-link" href="@GenerarUrlPaginacion(1)">
                                    <i class="bi bi-chevron-double-left"></i>
                                </a>
                            </li>
                            <li class="page-item">
                                <a class="page-link" href="@GenerarUrlPaginacion(ViewBag.PaginaActual - 1)">
                                    <i class="bi bi-chevron-left"></i>
                                </a>
                            </li>
                        }

                        <!-- Páginas numeradas -->
                        @for (int i = Math.Max(1, ViewBag.PaginaActual - 2); i <= Math.Min(ViewBag.TotalPaginas, ViewBag.PaginaActual + 2); i++)
                        {
                            <li class="page-item @(i == ViewBag.PaginaActual ? "active" : "")">
                                <a class="page-link" href="@GenerarUrlPaginacion(i)">@i</a>
                            </li>
                        }

                        <!-- Última página -->
                        @if (ViewBag.PaginaActual < ViewBag.TotalPaginas)
                        {
                            <li class="page-item">
                                <a class="page-link" href="@GenerarUrlPaginacion(ViewBag.PaginaActual + 1)">
                                    <i class="bi bi-chevron-right"></i>
                                </a>
                            </li>
                            <li class="page-item">
                                <a class="page-link" href="@GenerarUrlPaginacion(ViewBag.TotalPaginas)">
                                    <i class="bi bi-chevron-double-right"></i>
                                </a>
                            </li>
                        }
                    </ul>
                </nav>
                
                <div class="text-center mt-2">
                    <small class="text-muted">
                        Mostrando @((ViewBag.PaginaActual - 1) * ViewBag.ITEMS_POR_PAGINA + 1) a 
                        @Math.Min(ViewBag.PaginaActual * ViewBag.ITEMS_POR_PAGINA, ViewBag.TotalRegistros) 
                        de @ViewBag.TotalRegistros registros
                    </small>
                </div>
            </div>
        }
    </div>
}
else
{
    <div class="card">
        <div class="card-body text-center py-5">
            <i class="bi bi-inbox text-muted" style="font-size: 4rem;"></i>
            <h4 class="text-muted mt-3">No hay pagos de alquiler</h4>
            <p class="text-muted">
                @if (!string.IsNullOrEmpty(ViewBag.Buscar) || !string.IsNullOrEmpty(ViewBag.Estado))
                {
                    <text>No se encontraron pagos con los filtros aplicados.</text>
                }
                else
                {
                    <text>Aún no se han registrado pagos de alquiler.</text>
                }
            </p>
            <div class="mt-3">
                @if (!string.IsNullOrEmpty(ViewBag.Buscar) || !string.IsNullOrEmpty(ViewBag.Estado))
                {
                    <a href="@Url.Action("Index")" class="btn btn-outline-primary me-2">
                        <i class="bi bi-x-circle me-1"></i>Limpiar Filtros
                    </a>
                }
                <a href="@Url.Action("Create")" class="btn btn-primary">
                    <i class="bi bi-plus-circle me-1"></i>Crear Primer Pago
                </a>
            </div>
        </div>
    </div>
}

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Hacer filas clickeables para ver historial
            const filas = document.querySelectorAll('.pago-row');
            filas.forEach(fila => {
                fila.addEventListener('click', function(e) {
                    // No redirigir si se clickea en botones de acción
                    if (e.target.closest('.btn-group')) return;
                    
                    const contratoId = this.getAttribute('data-contrato-id');
                    if (contratoId) {
                        verHistorialContrato(contratoId);
                    }
                });
                
                // Efecto hover
                fila.addEventListener('mouseenter', function() {
                    this.classList.add('table-active');
                });
                
                fila.addEventListener('mouseleave', function() {
                    this.classList.remove('table-active');
                });
            });
        });

        function verHistorialContrato(contratoId) {
            if (contratoId) {
                window.location.href = '@Url.Action("Historial", "Alquileres")?contratoId=' + contratoId;
            }
        }

        // Auto-submit del formulario de búsqueda con delay
        let searchTimeout;
        document.getElementById('buscar').addEventListener('input', function() {
            clearTimeout(searchTimeout);
            searchTimeout = setTimeout(() => {
                document.getElementById('filtrosForm').submit();
            }, 1000);
        });

        // Submit inmediato al cambiar el select de estado
        document.getElementById('estado').addEventListener('change', function() {
            document.getElementById('filtrosForm').submit();
        });
    </script>
}

@functions {
    public string GetEstadoBadgeClass(string estado)
    {
        return estado?.ToLower() switch
        {
            "pagado" => "success",
            "pendiente" => "warning",
            "anulado" => "secondary",
            _ => "primary"
        };
    }
    
    public string GenerarUrlPaginacion(int pagina)
    {
        var routeValues = new RouteValueDictionary
        {
            { "pagina", pagina }
        };
        
        if (!string.IsNullOrEmpty(ViewBag.Buscar))
            routeValues.Add("buscar", ViewBag.Buscar);
            
        if (!string.IsNullOrEmpty(ViewBag.Estado))
            routeValues.Add("estado", ViewBag.Estado);
        
        return Url.Action("Index", routeValues) ?? string.Empty;
    }
}